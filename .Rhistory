setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/")
devtools::install("JGTools", upgrade="always")
library(JGTools)
?bu
?bu
?bu
.rs.restartR()
library(JGTools)
?bu
bu
bplot
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/JGTools/")
document()
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/")
devtools::install("JGTools", upgrade="always")
library(JGTools)
.rs.restartR()
library(JGTools)
blankplot()
blankplot(1:10, 110:1)
blankplot(1:10, 10:1)
blankplot<-function(x=0:1, y=0:1, ...) {
plot(x,y,..., xlab="", ylab="", axes=FALSE, type="n")
}
blankplot()
.axx
axis(1)
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/JGTools/")
document()
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/")
devtools::install("JGTools", upgrade="always")
library(JGTools)
blankplot(1:10, 10:1)
.rs.restartR()
axis(1)
Axes
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/JGTools/")
document()
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/")
devtools::install("JGTools", upgrade="always")
library(JGTools)
blankplot(1:10, 10:1)
.rs.restartR()
axx()
mtxx(expression(Speed ~ ms^-1 ~ by ~ impeller), "as"
)
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/JGTools/")
document()
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/")
devtools::install("JGTools", upgrade="always")
library(JGTools)
blankplot(1:10, 10:1)
axx()
.rs.restartR()
mtxx()
mtxx("aa","bb")
example(mtxx)
blankplot(1:10, 10:1)
axx()
mtxx("aa","bb")
blankplot(1:10, 10:1)
axx()
example(mtxx)
mtxx(expression(Log[10] ~ italics(Daphnia) ~ count), "as")
blankplot(1:10, 10:1)
axx()
mtxx(expression(Log[10] ~ italics(Daphnia) ~ count), "as")
blankplot(1:10, 10:1)
axx()
mtxx(expression(Log[10] ~ italic(Daphnia) ~ count), "as")
mtxx(expression(Log[10] ~ italic(Daphnia pulex) ~ count), "as")
mtxx(expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count), "as")
blankplot()
mtxx(expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count), "as")
blankplot()
mtxx(expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count ~ cm^-3), "as")
blankplot()
mtxx(expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count ~ cm^-3), expression(bar(x) == sum(frac(x[i], n), i==1, n)))
par(mar=c(10,10,1,1))
blankplot()
mtxx(expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count ~ cm^-3), expression(bar(x) == sum(frac(x[i], n), i==1, n)))
mtxx(expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count ~ cm^-3), expression(bar(x) == sum(frac(x[i], n), i==1, alpha)))
mtxx(expression(bar(x) == sum(frac(x[i], n), i==1, alpha)), expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count ~ cm^-3))
blankplot()
mtxx(expression(bar(x) == sum(frac(x[i], n), i==1, alpha)), expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count ~ cm^-3))
mtxx(expression(bar(x) == sum(frac(x[i], n), i==1, alpha) ~ (non-sensical ~ axes)), expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count ~ cm^-3))
blankplot()
mtxx(expression(bar(x) == sum(frac(x[i], n), i==1, alpha) ~ (non-sensical ~ axes)), expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count ~ cm^-3))
mtxx(expression(bar(x) == sum(frac(x[i], n), i==1, alpha) ~ (non-sensical ~ axes ~ demo ~ only)), expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count ~ cm^-3))
blankplot()
mtxx(expression(bar(x) == sum(frac(x[i], n), i==1, alpha) ~ (non-sensical ~ axes ~ demo ~ only)), expression(Log[10] ~ italic(Daphnia ~ pulex) ~ count ~ cm^-3))
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/JGTools/")
document()
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/")
devtools::install("JGTools", upgrade="always")
library(JGTools)
blankplot(1:10, 10:1)
axx()
mtxx("aa","bb")
example(mtxx)
.rs.restartR()
blankplot(1:10, 10:1)
axx()
mtxx("aa","bb")
example(mtxx)
.rs.restartR()
library(JGTools)
blankplot(1:10, 10:1)
axx()
mtxx("aa","bb")
example(mtxx)
?mar
??mar
?par
par(mar=c(5, 4, 4, 2) + 0.1.)
par(mar=c(5, 4, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
mtxx("aa","bb")
example(mtxx)
blankplot(1:10, 10:1)
axx()
example(mtxx)
x11()
blankplot(1:10, 10:1)
axx()
example(mtxx)
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
example(mtxx)
mtxx<-function(x,y, line1=3.5, line2=3, cex=1.4){
#opar<-par()
par(las=0)
mtext(side=1, x, line=line1, cex=cex)
mtext(side=2, y, line=line2, cex=cex)
#par(opar)
}
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/JGTools/")
document()
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/")
devtools::install("JGTools", upgrade="always")
library(JGTools)
.rs.restartR()
library(JGTools)
x11()
par(mar=c(6, 6, 4, 2) + 0.1)
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
example(mtxx)
x11()
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
example(mtxx)
mtxx
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/JGTools/")
document()
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/")
devtools::install("JGTools", upgrade="always")
library(JGTools)
.rs.restartR()
library(JGTools)
library(JGTools)
x11()
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
example(mtxx)
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/JGTools/")
document()
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/")
devtools::install("JGTools", upgrade="always")
library(JGTools)
.rs.restartR()
library(JGTools)
library(JGTools)
x11()
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
example(mtxx)
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
example(mtxx)
x11()
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
example(mtxx)
mtxx
mtxx<-function(x,y, line1=5, line2=3, cex=1.4){
#opar<-par()
par(las=0)
mtext(side=1, x, line=line1, cex=cex)
mtext(side=2, y, line=line2, cex=cex)
#par(opar)
}
example(mtxx)
mtxx<-function(x,y, line1=4, line2=3, cex=1.4){
#opar<-par()
par(las=0)
mtext(side=1, x, line=line1, cex=cex)
mtext(side=2, y, line=line2, cex=cex)
#par(opar)
}
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
example(mtxx)
mtxx("kajs;fd", "lakjsfd;l")
example(mtxx, line1=4)
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
mtxx("kajs;fd", "lakjsfd;l")
mtxx<-function(x,y, line1=3, line2=3, cex=1.4){
#opar<-par()
par(las=0)
mtext(side=1, x, line=line1, cex=cex)
mtext(side=2, y, line=line2, cex=cex)
#par(opar)
}
mtxx("kajs;fd", "lakjsfd;l")
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
example(mtxx, line1=4)
mtxx("kajs;fd", "lakjsfd;l")
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/JGTools/")
document()
setwd("C:/Users/jrg1035/Dropbox/R/RToolsParent/")
devtools::install("JGTools", upgrade="always")
library(JGTools)
.rs.restartR()
library(JGTools)
x11()
par(mar=c(6, 6, 4, 2) + 0.1)
blankplot(1:10, 10:1)
axx()
example(mtxx)
ci95
get_user
get_user <- function()
{
env <- if(.Platform$OS.type == "windows") "USERNAME" else "USER"
unname(Sys.getenv(env))
}
get_user()
.rd.csv <- function(varname, src, makefile=NULL, notes=NULL){
require(data.table)
.assign_with_metadata(eval(varname), data.table(.cleannames(read.csv(src))), source=src, makefile=makefile, notes=notes, pos=globalenv())
}
.rd.csv
.cleannames
library(igraph)
library(dplyr)
.curvedarrow<-function(x, y, ang=NULL, angoff=20, ce=c(20,20), col=4, wi=2, cu=-.75, circo=1, dir=TRUE, lwd=3, sh.lty=1, h.lty=1){
require(igraph)
iArrows <- igraph:::igraph.Arrows
if (length(ce)==1) ce<-c(ce,ce)
if (length(circo==1)) circo<-c(circo, circo)
rad=ce/12
allang<-seq(0,2*pi,.001)
for (i in 1:2) {points( x[i]+(cos(allang)*rad[i]), y[i]+(sin(allang)*rad[i]), type="l",
col=circo[i], lwd=lwd)}
angle<-(atan((y[2]-y[1])/(x[2]-x[1])))/(pi/180)
if (is.null(ang))
if (cu<0) ang<-c(angle-angoff, angle+180+angoff) else ang<-c(angle+angoff, angle+180-angoff)
(x1<-x+(cos(ang*(pi/180))*rad))
(y1<-y+(sin(ang*(pi/180))*rad))
if (dir) use<-c(x1[1], y1[1], x1[2], y1[2]) else {use<-c(x1[2], y1[2], x1[1], y1[1]); cu<-(-cu)}
iArrows(use[1],use[2],use[3],use[4],
h.lwd=wi, sh.lwd=wi, sh.col=col,
curve=cu, width=1.5, size=1.2,  sh.lty=sh.lty, h.lty=h.lty)
}
.curvedarrow(c(2,8), c(2,4))
.curvedarrow(c(2,8), c(2,4), circo=.5)
.curvedarrow(c(2,8), c(2,4), circo=1.5)
.curvedarrow(c(2,8), c(2,4), wi=.5)
.curvedarrow(c(2,8), c(2,4), wi=.5)
.curvedarrow(c(2,8), c(2,4), wi=.5)
.curvedarrow(c(2,8), c(2,4), wi=3.5)
blankplot(1:10, 1:10)
.curvedarrow(c(2,8), c(2,4), rad=3.5)
.curvedarrow(c(2,8), c(2,4))
.curvedarrow(c(2,8), c(2,4),ce=c(10,20))
.curvedarrow(c(2,8), c(2,4),ce=c(10,10))
blankplot(1:10, 1:10)
.curvedarrow(c(2,8), c(2,4),ce=c(10,10))
.curvedarrow(c(2,8), c(2,8),ce=c(10,10))
.curvedarrow(c(2,6), c(2,8),ce=c(10,10))
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), and=10)
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), ang=10)
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), ang=180)
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), ang=90)
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), ang=-90)
blankplot(1:10, 1:10)
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), ang=-90)
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), ang=c(0,-90))
blankplot(1:10, 1:10)
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), ang=c(0,-90))
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), ang=c(30,-90))
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), ang=c(20,-90))
blankplot(1:10, 1:10)
.curvedarrow(c(2,6), c(2,8),ce=c(10,10), ang=c(20,-90))
.clean(c(1, 2, "aja alk", "% s"))
.clean<-function(vect) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", " ", x)
x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '_', x)  ## interior spaces
x <-  gsub('\\.', '_', x)  ## interior spaces
x <-  gsub('__', '_', x)  ## interior spaces
x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
return(x)}
.clean(c(1, 2, "aja alk", "% s"))
.clean(c(1, 2, " aja alk", "% s"))
.clean<-function(vect) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", " ", x)
x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '', x)  ## interior spaces
x <-  gsub('\\.', '_', x)  ## interior spaces
x <-  gsub('__', '_', x)  ## interior spaces
x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
return(x)}
.clean(c(1, 2, " aja alk", "% s"))
.clean<-function(vect, interiorSpaces2Underscore = FALSE) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", " ", x)
x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '', x)  ## leading spaces
if (interiorSpaces2Underscore) x <-  gsub('\\.', '_', x)  ## interior spaces
x <-  gsub('__', '_', x)  ## interior spaces
x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
return(x)}
.clean(c(1, 2, " aja alk", "% s"))
.clean<-function(vect, interiorSpaces2Underscore = FALSE) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", " ", x)
x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '', x)  ## leading spaces
if (interiorSpaces2Underscore) x <-  gsub('\\.', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
return(x)}
.clean(c(1, 2, " aja alk", "% s"))
.clean<-function(vect, interiorSpaces2Underscore = FALSE) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", " ", x)
x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '', x)  ## leading spaces
if (interiorSpaces2Underscore) x <-  gsub('\\.', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
return(x)}
.clean(c(1, 2, " aja alk", "% s"))
.clean<-function(vect, interiorSpaces2Underscore = FALSE) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", " ", x)
if (interiorSpaces2Underscore) x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '', x)  ## leading spaces
if (interiorSpaces2Underscore) x <-  gsub('\\.', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
return(x)}
.clean(c(1, 2, " aja alk", "% s"))
.clean<-function(vect, interiorSpaces2Underscore = FALSE) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", " ", x)
if (interiorSpaces2Underscore) x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '', x)  ## leading spaces
if (interiorSpaces2Underscore) x <-  gsub('\\.', '_', x)  ## interior spaces
x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
return(x)}
.clean(c(1, 2, " aja alk", "% s"))
.clean<-function(vect, interiorSpaces2Underscore = FALSE) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", " ", x)
if (interiorSpaces2Underscore) x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '', x)  ## leading spaces
if (interiorSpaces2Underscore) x <-  gsub('\\.', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
return(x)}
.clean(c(1, 2, " aja alk", "% s"), interiorSpaces2Underscore = FALSE)
.clean(c(1, 2, " aja alk", "% s"), interiorSpaces2Underscore = TRUE)
x = c(1, 2, " aja alk", "% s")
gsub('__', '_', x)
gsub('\\.', '_', x)
x = c(1, 2, " aja alk", "% s ")
gsub(' +$', '', x)
gsub(' +$', '', x)
gsub("[[:punct:]]", " ", x)
gsub("[[:punct:]]", "", x)
.clean<-function(vect, interiorSpaces2Underscore = FALSE) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", "", x)
if (interiorSpaces2Underscore) x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '', x)  ## leading spaces
if (interiorSpaces2Underscore) x <-  gsub('\\.', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
return(x)}
.clean(x = c(1, 2, " aja alk", "% s "), interiorSpaces2Underscore = TRUE)
.clean<-function(vect, interiorSpaces2Underscore = FALSE) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", "", x)
if (interiorSpaces2Underscore) x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '', x)  ## leading spaces
if (interiorSpaces2Underscore) x <-  gsub('\\.', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
return(x)}
.clean(x = c(1, 2, " aja alk", "% s "), interiorSpaces2Underscore = TRUE)
.clean
.clean(c(1, 2, " aja alk", "% s "), interiorSpaces2Underscore = TRUE)
.clean(c(1, 2, " aja alk", "% s "), interiorSpaces2Underscore = FALSE)
.clean<-function(vect, interiorSpaces2Underscore = FALSE) {
x <- as.character(vect)
x <- tolower(x)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <-  gsub(' +$', '', x)  ## trailing spaces only
x <- gsub("[[:punct:]]", "", x)
if (interiorSpaces2Underscore) x <-  gsub(' +', '_', x)  ## interior spaces
x <-  gsub('_+', '', x)  ## leading spaces
x <-  gsub('\\.', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('&+', 'and', x)
x <-  gsub('\\(', '', x)
x <-  gsub('\\)', '', x)
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
if (interiorSpaces2Underscore) x <-  gsub('__', '_', x)  ## interior spaces
return(x)}
.clean(c(1, 2, " aja alk", "% s "), interiorSpaces2Underscore = TREU)
.clean(c(1, 2, " aja alk", "% s "), interiorSpaces2Underscore = TRUE)
