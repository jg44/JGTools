xvals <- rep(1:xcat, each=fcat)+fcatMultiplier*fcatOffset
betweencats <- 1:(xcat-1)+diff(1:xcat)/2
xax <- c(min(xvals)-border/fcat, max(xvals)+border/fcat)
# plot(xvals, 1:totPts, ylim=c(0, max(totPts)*1.1), xlim=xax, col=1:fcat)
#
# .addse(xvals, 1:totPts, .8 )
#
return(list(xvals=xvals, xax=xax, catlabels=1:xcat, catbreaks=betweencats,
xlabels=levels(xfactor), legendlabels=levels(factor2),
xfactorName=xfactorName, factor2Name=factor2Name,
responseName=responseName, meanvalue=meanz))
}
with(Moore, getxaxis(fscore, fcategory, partner.status, between=.25, border=.7))
par(pch=19)
Moore$fcategory <- factor(Moore$fcategory, levels = c("low", "medium", "high"))
Moore$partner.status <- factor(Moore$partner.status, levels = c("low", "high"))
blankplot(1,1)
plotparams <- with(Moore, getxaxis(fscore, partner.status, fcategory, between=.25, border=.7))
library(JGTools)
par(pch=19, cex=1.1)
with(plotparams, {
blankplot(1,1, xlim=xax, ylim=c(0,7))
.addse(xvals, meanz$mean, .9)
points(xvals, meanz$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)], legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.1,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1)
with(plotparams, {
blankplot(1,1, xlim=xax, ylim=c(0,7))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)], legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.1,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1)
with(plotparams, {
blankplot(1,1, xlim=xax)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)], legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.1,.03), bty="n", cex=1.2)
}
)
with(plotparams, {
blankplot(1,1, xlim=xax, ylim=c(0,40))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)], legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.1,.03), bty="n", cex=1.2)
}
)
plotparams
par(pch=19, cex=1.1)
par(pch=19, cex=1.1)
with(plotparams, {
blankplot(1,1, xlim=xax, ylim=c(18,80))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)], legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.1,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1)
with(plotparams, {
blankplot(1,1, xlim=xax, ylim=c(18,80))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)], legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.1,.03), bty="n", cex=1.2)
}
)
plotparams <- with(Moore, getxaxis(fscore, fcategory, partner.status, between=.25, border=.7))
library(JGTools)
par(pch=19, cex=1.1)
with(plotparams, {
blankplot(1,1, xlim=xax, ylim=c(18,80))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)], legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.1,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1)
with(plotparams, {
blankplot(1,1, xlim=xax, ylim=c(18,80))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)], legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.1,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1)
with(plotparams, {
blankplot(1,1, xlim=xax, ylim=c(18,80))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.01,.03), bty="n", cex=1.2)
}
)
with(plotparams, {
blankplot(1,1, xlim=xax, ylim=c(18,86))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.01,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1)
with(plotparams, {
blankplot(1,1, xlim=xax, ylim=c(18,86))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1)
with(plotparams, {
yl <- c(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se), meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se))
blankplot(1,1, xlim=xax, ylim=yl))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
par(pch=19, cex=1.1)
with(plotparams, {
yl <- c(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se), meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se))
blankplot(1,1, xlim=xax, ylim=yl)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
)
with(plotparams,
meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)
)
par(pch=19, cex=1.1)
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topleft", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
)
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
)
plotparams <- with(Moore, getxaxis(fscore, partner.status, fcategory, between=.25, border=.7))
library(JGTools)
par(pch=19, cex=1.1)
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
)
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl+c(0,10))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
)
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl+c(0,100))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
)
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl+c(0,20))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1, mar=c(6,6,1,6))
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl+c(0,20))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1, mar=c(6,6,1,5))
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl+c(0,20))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(.03,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1, mar=c(6,6,1,5))
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl+c(0,20))
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(-.03,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1, mar=c(6,6,1,5))
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(-.03,.03), bty="n", cex=1.2)
}
)
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(-.13,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1, mar=c(6,6,1,5))
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
par(xpd=TRUE)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(-.13,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1, mar=c(6,6,1,5))
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
par(xpd=TRUE)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(-.2,.03), bty="n", cex=1.2)
}
)
par(pch=19, cex=1.1, mar=c(6,6,1,5))
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
par(xpd=TRUE)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(-.2,.03), bty="n", cex=1.2)
par(xpd=FALSE)
}
)
par(pch=19, cex=1.1, mar=c(6,6,1,5))
with(plotparams, {
yl <- c(min(meanvalue$mean-0.1*(meanvalue$mean+meanvalue$se)), max(meanvalue$mean+0.1*(meanvalue$mean+meanvalue$se)))
blankplot(1,1, xlim=xax, ylim=yl)
.addse(xvals, meanvalue$mean, .9)
points(xvals, meanvalue$mean, col=(2:4)[as.factor(legendlabels)], pch=c(15,4,19)[as.factor(legendlabels)])
axx(x=FALSE)
axis(1, cex.axis = 1.3, at=catlabels, xlabels)
abline(v=catbreaks, lty=3)
mtxx(xfactorName, responseName)
par(xpd=TRUE)
legend("topright", title = factor2Name, col=(2:4)[as.factor(legendlabels)],
legend=legendlabels, pch=c(15,4,19)[as.factor(legendlabels)], inset=c(-.2,.03), bty="n", cex=1.2)
par(xpd=FALSE)
}
)
bu(getwd())
library(JGTools)
bu(getwd())
#devtools::install_github("klutometis/roxygen", lib = Sys.getenv("R_LIBS_USER"))
#devtools::install_github
library(roxygen2)
document()
#devtools::install_github("klutometis/roxygen", lib = Sys.getenv("R_LIBS_USER"))
#devtools::install_github
library(roxygen2)
document()
library("devtools")
#devtools::install_github("klutometis/roxygen", lib = Sys.getenv("R_LIBS_USER"))
#devtools::install_github
library(roxygen2)
#' Source from Dropbox file URL
#'
#' This function loads an .R file from a dropbox link
#' @param dropbox.url url for shared dropbox link
#'
#'#' @keywords dropbox source
#' @export
#' @examples
#' imported.data.table <- read.csv.dt("./csvs/test.csv")
sourceDropbox = function(dropbox.url) {
# Purpose: source an R script from a Dropbox file
# Input: the URL that you get when you share a Dropbox file
# Output: the input to the source() function
# Example of use:
# source(source.dropbox('https://www.dropbox.com/s/9m4139zbnee59jh/grfpairs.R'))
# Author: George Fisher george@georgefisher.com
# Date : October 30, 2013
# thanks to
# http://thebiobucket.blogspot.com/2012/05/source-r-script-from-dropbox.html
# note: this goes out over the network so you might want to package several
# functions into one file
# modified by Jeff Garnas, 2021.08.03
require(RCurl)
#setwd(tempdir())
tmpdr <- tempdir()
destfile = "filetosource.txt"
# use regex to get the piece of the Dropbox URL we need
matches <- regexpr("(/s/.*)", dropbox.url, perl = TRUE, ignore.case = TRUE)
result <- attr(matches, "capture.start")[, 1]
attr(result, "match.length") <- attr(matches, "capture.length")[, 1]
dropbox.tail = regmatches(dropbox.url, result)
# (my eternal thanks to the RegexBuddy program)
# create the request URL
dburl = paste("https://dl.dropbox.com", dropbox.tail, sep = "")
x = getBinaryURL(dburl, followlocation = TRUE, ssl.verifypeer = FALSE)
writeBin(x, paste0(tmpdr, "\\", destfile), useBytes = TRUE)
paste0(tmpdr, "\\", destfile)
}
source(source.dropbox('https://www.dropbox.com/s/9m4139zbnee59jh/grfpairs.R'))
source(sourceDropbox('https://www.dropbox.com/s/9m4139zbnee59jh/grfpairs.R'))
source(sourceDropbox("https://www.dropbox.com/s/xgbv7suucwf57xq/functionlist.r?dl=0"))  # sources
clear()
imported.data.table <- read.csv.dt("test", datadir= "./csvs/")
imported.data.table
getwd()
#'
#' This function imports a csv file into a data.table object
#' @param file filename No default (required)
#' @param datadir Relative (or absolute) path to data directory
#' @param sep Use comma for csv
#' @param header Defaults to TRUE
#' @keywords csv
#' @export
#' @examples
#' write.csv(file="test.csv", data.frame(a=1:2, b=c("one","two"))); imported.data.table <- read.csv.dt("test.csv", datadir= "")
rm(imported.data.table)
write.csv(file="test.csv", data.frame(a=1:2, b=c("one","two")));
imported.data.table <- read.csv.dt("test.csv", datadir= "")
imported.data.table
?requireNamespace
library(JGTools)
library(JGTools)
library(JGTools)
library("devtools")
#devtools::install_github("klutometis/roxygen", lib = Sys.getenv("R_LIBS_USER"))
#devtools::install_github
library(roxygen2)
roxygen2::d
# create_package("JGTools")
setwd("C:/Users/jrg1035/GitProjects/JGTools/")
document()
library(devtools)
source(source.dropbox("https://www.dropbox.com/s/xgbv7suucwf57xq/functionlist.r?dl=0"))
source(sourceDropbox("https://www.dropbox.com/s/xgbv7suucwf57xq/functionlist.r?dl=0"))
.addse()
.addse
document()
devtools::install("JGTools", upgrade="always")
install.packages("JGTools",dependencies=TRUE,repos= NULL, type="source")
library("devtools")
library(devtools)
install_github("jg44/JGTools", upgrade = TRUE)
library(JGTools)
source(source.dropbox("https://www.dropbox.com/s/xgbv7suucwf57xq/functionlist.r?dl=0"))
source(sourceDropbox("https://www.dropbox.com/s/xgbv7suucwf57xq/functionlist.r?dl=0"))
.axx()
example(sourceDropbox)
examples(sourceDropbox)
?sourceDropbox
source(sourceDropbox("https://www.dropbox.com/s/gidwa8g23df6uw4/functionlistSample.r?dl=0"))
document()
library("devtools")
#devtools::install_github("klutometis/roxygen", lib = Sys.getenv("R_LIBS_USER"))
#devtools::install_github
library(roxygen2)
# create_package("JGTools")
setwd("C:/Users/jrg1035/GitProjects/JGTools/")
document()
