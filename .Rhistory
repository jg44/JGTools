par(cex.axis=1.5, mar=c(6,6,1,1))
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+SE.drymass), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = SE.drymass)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4)]
axx(x=FALSE)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
mtext(at=0.05, side=1, line=1, col="dark blue", "Nitrogen:", adj=0, cex=1.4)
mtext(at=0.05, side=1, line=2.5, col="dark red", "Phosphorus:", adj=0, cex=1.4)
mtxx(expression(paste("Nutrient levels (g·L"^{-1}," of solution)")) ,
expression("Aboveground dry mass (g)  " %+-% "SE"), line1=4.5)
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4, cex=2)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=1, cex=1.5)]
# x11() #or quartz() (windows and mac, respectively)
par(cex.axis=1.5, mar=c(6,6,1,1))
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+SE.drymass), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = SE.drymass)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4, cex=2)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=1, cex=1.15)]
axx(x=FALSE)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
mtext(at=0.05, side=1, line=1, col="dark blue", "Nitrogen:", adj=0, cex=1.4)
mtext(at=0.05, side=1, line=2.5, col="dark red", "Phosphorus:", adj=0, cex=1.4)
mtxx(expression(paste("Nutrient levels (g·L"^{-1}," of solution)")) ,
expression("Aboveground dry mass (g)  " %+-% "SE"), line1=4.5)
# x11() #or quartz() (windows and mac, respectively)
par(cex.axis=1.5, mar=c(6,6,1,1))
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+SE.drymass), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = SE.drymass)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4, cex=2)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=1, cex=1.15)]
axx(x=FALSE)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
mtext(at=0.05, side=1, line=1, col="dark blue", "Nitrogen:", adj=0, cex=1.4)
mtext(at=0.05, side=1, line=2.5, col="dark red", "Phosphorus:", adj=0, cex=1.4)
mtxx(expression(paste("Nutrient levels (g·L"^{-1}," of watering solution)")) ,
expression("Aboveground dry mass (g)  " %+-% "SE"), line1=4.5)
?devtools::use data
?use data
library(devtool)
library(devtools)
?devtools::use data
?devtools::use_data
?use_data
devtools::use data(plantGrowth)
devtools::use_data(plantGrowth)
devtools::use_data(plantGrowth, JGTools)
devtools::use_data("plantGrowth", JGTools)
save(plantGrowth, "./data/plantGrowth.rda")
bu()
save(plantGrowth, "./data/plantGrowth.rda")
save(plantGrowth, file= "./data/plantGrowth.rda")
devtools::use_data(plantGrowth, JGTools)
data("plantGrowth")
rm(plantGrowth)
plantGrowth
data("plantGrowth")
plantGrowth
data(plantGrowth)
data(plantGrowth)
library("devtools")
#devtools::install_github("klutometis/roxygen", lib = Sys.getenv("R_LIBS_USER"))
#devtools::install_github
library(roxygen2)
document()
# use data.table to aggregate data by treatment and calculate useful descriptive stats.
agg.plantGrowth <- plantGrowth[, list(mean.drymass=mean(drymass), sd=sd(drymass), N=.N,
SE.drymass=sd(drymass)/sqrt(.N),
plusminusCI95=abs(qt(.025, .N-1))*sd(drymass)/sqrt(.N) ),
by=list(N, P)]
data(plantGrowth)
# use data.table to aggregate data by treatment and calculate useful descriptive stats.
agg.plantGrowth <- plantGrowth[, list(mean.drymass=mean(drymass), sd=sd(drymass), N=.N,
SE.drymass=sd(drymass)/sqrt(.N),
plusminusCI95=abs(qt(.025, .N-1))*sd(drymass)/sqrt(.N) ),
by=list(N, P)]
agg.plantGrowth
plantGrowth
# use data.table to aggregate data by treatment and calculate useful descriptive stats.
agg.plantGrowth <- plantGrowth[, list(mean.drymass=mean(drymass), sd=sd(drymass), N=.N,
SE.drymass=sd(drymass)/sqrt(.N),
plusminusCI95=abs(qt(.025, .N-1))*sd(drymass)/sqrt(.N) ),
by=list(N, P)]
agg.plantGrowth
plantGrowth
as.data.table(plantGrowth)
library(data.table)
data(plantGrowth)
as.data.table(plantGrowth)
plantGrowth <- as.data.table(plantGrowth)
# use data.table to aggregate data by treatment and calculate useful descriptive stats.
agg.plantGrowth <- plantGrowth[, list(mean.drymass=mean(drymass), sd=sd(drymass), N=.N, SE.drymass=sd(drymass)/sqrt(.N)), by=list(N, P)]
agg.plantGrowth <- plantGrowth[, list(mean.drymass=mean(drymass), sd=sd(drymass), N=.N, SE.drymass=sd(drymass)/sqrt(.N)), by=list(N, P)]
# use data.table to aggregate data by treatment and calculate useful descriptive stats.
agg.plantGrowth <- plantGrowth[, list(mean.drymass=mean(drymass), sd=sd(drymass), N=.N,
SE.drymass=sd(drymass)/sqrt(.N),
plusminusCI95=abs(qt(.025, .N-1))*sd(drymass)/sqrt(.N) ),
by=list(N, P)]
agg.plantGrowth
x11()
# x11() #or quartz() (windows and mac, respectively)
par(cex.axis=1.5, mar=c(6,6,1,1))
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+SE.drymass), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = SE.drymass)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4, cex=2)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=1, cex=1.15)]
axx(x=FALSE)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
mtext(at=0.05, side=1, line=1, col="dark blue", "Nitrogen:", adj=0, cex=1.4)
mtext(at=0.05, side=1, line=2.5, col="dark red", "Phosphorus:", adj=0, cex=1.4)
mtxx(expression(paste("Nutrient levels (g·L"^{-1}," of watering solution)")) ,
expression("Aboveground dry mass (g)  " %+-% "SE"), line1=4.5)
par(cex.axis=1.5, mar=c(6,6,1,1))
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+plusminusCI95), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = plusminusCI95)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4)]
axx(x=FALSE)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
mtext(at=0.05, side=1, line=1, col="dark blue", "Nitrogen:", adj=0, cex=1.4)
mtext(at=0.05, side=1, line=2.5, col="dark red", "Phosphorus:", adj=0, cex=1.4)
mtxx(expression(paste("Nutrient levels (g·L"^{-1}," of solution)")) ,
expression("Aboveground dry mass (g) with 95% CI"), line1=4.5)
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = plusminusCI95)]
#' This function prepares the plotting area with a blank plot
#' @param x X values for error bar addition.
#' @param y Y values for error bar addition (typically mean Y values)
#' @param errorbar Length of lower and upper error bars as a vector of length 2 (or 1 if symmetrical)
#' @keywords plot
#' @export
#' @examples
#' blankplot(1:10, 1:10)
#' points(1:10, run)
#'
adderrorbars<-function(x, y, errorbar, length=.07, col=1, horiz=FALSE){
errorcount <- ncol(as.data.frame(errorbar))
if (errorcount==1) errorUse <- data.frame(LL=errorbar, UL=errorbar)
if (errorcount==2) errorUse <- data.frame(LL=errorbar[,1], UL=errorbar[,2])
if (!(errorcount %in% 1:2)) break
if (horiz) {arrows(x-errorUse[,1], y, x+errorUse[,2], y, code=3, angle=90, length=length, col=col)} else {
arrows(x, y-errorUse[,1], x, y+errorUse[,2], code=3, angle=90, length=length, col=col)
}
}
# x11() #or quartz() (windows and mac, respectively)
par(cex.axis=1.5, mar=c(6,6,1,1))
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+SE.drymass), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = SE.drymass)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4, cex=2)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=1, cex=1.15)]
axx(x=FALSE)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
mtext(at=0.05, side=1, line=1, col="dark blue", "Nitrogen:", adj=0, cex=1.4)
mtext(at=0.05, side=1, line=2.5, col="dark red", "Phosphorus:", adj=0, cex=1.4)
mtxx(expression(paste("Nutrient levels (g·L"^{-1}," of watering solution)")) ,
expression("Aboveground dry mass (g)  " %+-% "SE"), line1=4.5)
par(cex.axis=1.5, mar=c(6,6,1,1))
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+plusminusCI95), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = plusminusCI95)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4)]
axx(x=FALSE)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
mtext(at=0.05, side=1, line=1, col="dark blue", "Nitrogen:", adj=0, cex=1.4)
mtext(at=0.05, side=1, line=2.5, col="dark red", "Phosphorus:", adj=0, cex=1.4)
mtxx(expression(paste("Nutrient levels (g·L"^{-1}," of solution)")) ,
expression("Aboveground dry mass (g) with 95% CI"), line1=4.5)
adderrorbars
document()
devtools::use_data(plantGrowth)
install.packages("usethis")
install.packages("usethis")
library("usethis")
usethis::use_data(plantGrowth)
plantGrowth
par(cex.axis=1.5, mar=c(6,6,1,1))
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+plusminusCI95), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = plusminusCI95)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4)]
data(plantGrowth)
plantGrowth <- as.data.table(plantGrowth)
# use data.table to aggregate data by treatment and calculate useful descriptive stats.
agg.plantGrowth <- plantGrowth[, list(mean.drymass=mean(drymass), sd=sd(drymass), N=.N,
SE.drymass=sd(drymass)/sqrt(.N),
plusminusCI95=abs(qt(.025, .N-1))*sd(drymass)/sqrt(.N) ),
by=list(N, P)]
# x11() #or quartz() (windows and mac, respectively)
par(cex.axis=1.5, mar=c(6,6,1,1))
library(data.table)
data(plantGrowth)
plantGrowth <- as.data.table(plantGrowth)
# use data.table to aggregate data by treatment and calculate useful descriptive stats.
agg.plantGrowth <- plantGrowth[, list(mean.drymass=mean(drymass), sd=sd(drymass), N=.N,
SE.drymass=sd(drymass)/sqrt(.N),
plusminusCI95=abs(qt(.025, .N-1))*sd(drymass)/sqrt(.N) ),
by=list(N, P)]
# x11() #or quartz() (windows and mac, respectively)
par(cex.axis=1.5, mar=c(6,6,1,1))
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+SE.drymass), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = SE.drymass)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4, cex=2)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=1, cex=1.15)]
axx(x=FALSE)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
mtext(at=0.05, side=1, line=1, col="dark blue", "Nitrogen:", adj=0, cex=1.4)
mtext(at=0.05, side=1, line=2.5, col="dark red", "Phosphorus:", adj=0, cex=1.4)
mtxx(expression(paste("Nutrient levels (g·L"^{-1}," of watering solution)")) ,
expression("Aboveground dry mass (g)  " %+-% "SE"), line1=4.5)
library(JGTools)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
mtext(at=0.05, side=1, line=1, col="dark blue", "Nitrogen:", adj=0, cex=1.4)
mtext(at=0.05, side=1, line=2.5, col="dark red", "Phosphorus:", adj=0, cex=1.4)
mtxx(expression(paste("Nutrient levels (g·L"^{-1}," of watering solution)")) ,
expression("Aboveground dry mass (g)  " %+-% "SE"), line1=4.5)
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+SE.drymass), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = SE.drymass)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4, cex=2)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=1, cex=1.15)]
axx(x=FALSE)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
x11() #or quartz() (windows and mac, respectively)
par(cex.axis=1.5, mar=c(6,6,1,1))
agg.plantGrowth[, blankplot(1:length(mean.drymass)+c(-.2, .2),
seq(0, max(mean.drymass+SE.drymass), length.out=length(mean.drymass))  )]
agg.plantGrowth[, adderrorbars(1:length(mean.drymass), y = mean.drymass, errorbar = SE.drymass)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=4, cex=2)]
agg.plantGrowth[, points(1:length(mean.drymass), mean.drymass, pch=19, col=1, cex=1.15)]
axx(x=FALSE)
agg.plantGrowth[, mtext(cex=1.4, at=1:length(mean.drymass), c(.1, 1, .1, 1), side=1, line=1, col="dark blue")]
agg.plantGrowth[, mtext(cex=1.4, at=c(1.5, 3.5), c(.04, .4), side=1, line=2.5, col="dark red")]
mtext(at=0.05, side=1, line=1, col="dark blue", "Nitrogen:", adj=0, cex=1.4)
mtext(at=0.05, side=1, line=2.5, col="dark red", "Phosphorus:", adj=0, cex=1.4)
mtxx(expression(paste("Nutrient levels (g·L"^{-1}," of watering solution)")) ,
expression("Aboveground dry mass (g)  " %+-% "SE"), line1=4.5)
plantGrowth
document()
#devtools::install_github("klutometis/roxygen", lib = Sys.getenv("R_LIBS_USER"))
#devtools::install_github
library(roxygen2)
library("devtools")
library("usethis")
document()
rm(list = c("adderrorbars"))
document()
rm(list=ls())
library(JGTools)
library(devtools)
install_github("jg44/JGTools", upgrade = TRUE)
rm(list=ls())
install_github("jg44/JGTools", upgrade = TRUE)
#install.packages("devtools")
library(devtools)
document()
update_packages("JGTools")
#devtools::install_github("klutometis/roxygen", lib = Sys.getenv("R_LIBS_USER"))
#devtools::install_github
library(roxygen2)
library("usethis")
document()
library("devtools")
document()
install_github("jg44/JGTools", upgrade = TRUE)
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE)
library(JGTools)
?adderrorbars
example("adderrorbars")
x11()
example("adderrorbars")
example("adderrorbars")
x11(15,6)
par(mfrow=c(1,2))
example("adderrorbars")
Sys.info()
Sys.info()$sysname
Sys.info()$sysname
Sys.info("sysname")
Sys.info()
Sys.info()[1]
devWin <- function(height=8, width=9){
if (Sys.info()[1]=="Windows") x11(height=height, width=width) else
quartz(height=height, width=width)
}
devWin(15,6)
devWin(5,15)
devWin(8,15)
par(mfrow=c(1,2))
library(data.table)
library(JGTools)
data(plantGrowth)
plantGrowth <- as.data.table(plantGrowth)
# use data.table to aggregate data by treatment and calculate useful descriptive stats.
agg.plantGrowth <- plantGrowth[, list(mean.drymass=mean(drymass), sd=sd(drymass), N=.N,
SE.drymass=sd(drymass)/sqrt(.N),
plusminusCI95=abs(qt(.025, .N-1))*sd(drymass)/sqrt(.N) ),
by=list(N, P)]
example("adderrorbars")
devWin()
devWin
edit(devWin)
devWin <- function(height=8, width=9, rows=1, cols=1){
if (Sys.info()[1]=="Windows") x11(height=height, width=width) else
quartz(height=height, width=width)
par(mfrow=c(rows, cols))
}
devWin(6,10, 1, 2)
plot(1)
plot(1)
devWin <- function(height=8, width=9, rows=1, cols=1){
if (Sys.info()[1]=="Windows") x11(height=height, width=width) else
quartz(height=height, width=width)
par(mfrow=c(rows, cols, oma=c(6,6,1,1)))
}
devWin(6,10, 1, 2)
plot(1)
plot(1)
devWin(6,10, 1, 2)
plot(1)
devWin
par(mfrow=c(rows, cols, oma=c(6,6,1,1))
}
devWin <- function(height=8, width=9, rows=1, cols=1){
if (Sys.info()[1]=="Windows") x11(height=height, width=width) else
quartz(height=height, width=width)
par(mfrow=c(rows, cols), oma=c(6,6,1,1))
}
devWin(6,10, 1, 2)
plot(1)
plot(1)
#' @examples
devWin <- function(height=8, width=9, rows=1, cols=1, ...){
if (Sys.info()[1]=="Windows") x11(height=height, width=width) else
quartz(height=height, width=width)
par(mfrow=c(rows, cols), oma=c(6,6,1,1))
}
devWin(6,10, 1, 2)
plot(1)
plot(1)
devWin <- function(height=8, width=9, rows=1, cols=1, oma=c(1,1,1,1)){
if (Sys.info()[1]=="Windows") x11(height=height, width=width) else
quartz(height=height, width=width)
par(mfrow=c(rows, cols), oma=oma)
}
devWin(6,10, 1, 2)
plot(1)
plot(1)
devWin(6,10, 1, 2, oma=c(5,5,1,1))
plot(1)
plot(1)
devWin()
devWin <- function(height=6, width=6, rows=1, cols=1, oma=c(1,1,1,1)){
if (Sys.info()[1]=="Windows") x11(height=height, width=width) else
quartz(height=height, width=width)
par(mfrow=c(rows, cols), oma=oma)
}
devWin()
devWin <- function(height=7, width=7, rows=1, cols=1, oma=c(1,1,1,1)){
if (Sys.info()[1]=="Windows") x11(height=height, width=width) else
quartz(height=height, width=width)
par(mfrow=c(rows, cols), oma=oma)
}
devWin()
devWin(6,10, 1, 2, oma=c(2,2,1,1))
plot(1,1, main="left plot")
plot(1,1, main="right plot")
mtext("both plots x", outer=TRUE)
mtext("both plots y", outer=TRUE)
mtext("both plots x", outer=TRUE)
mtext("both plots y", outer=TRUE)
mtext("both plots x", outer=TRUE, side=1, cex=1.8)
mtext("both plots y", outer=TRUE, side=2, cex=1.8)
#install.packages("devtools")
library(devtools)
#devtools::install_github("klutometis/roxygen", lib = Sys.getenv("R_LIBS_USER"))
#devtools::install_github
library(roxygen2)
library("devtools")
document()
devWin()
document()
#devtools::install_github("klutometis/roxygen", lib = Sys.getenv("R_LIBS_USER"))
#devtools::install_github
library(roxygen2)
document()
library("devtools")
document()
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE)
install_github("jg44/JGTools", upgrade = TRUE)
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
library(JGTools)
example("adderrorbars")
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE)
example("adderrorbars")
library(JGTools)
example("adderrorbars")
detach("package:JGTools", unload = TRUE, force=TRUE)
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
library(JGTools)
example("adderrorbars")
detach("package:JGTools", unload = TRUE)
#install.packages("devtools")
library(devtools)
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
library(JGTools)
example("adderrorbars")
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
library(JGTools)
example("adderrorbars")
library(JGTools)
example("adderrorbars")
detach("package:JGTools", unload = TRUE)
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
#install.packages("devtools")
library(devtools)
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
library(JGTools)
?adderrorbars
library(JGTools)
?adderrorbars
library(JGTools)
JGTools::
?adderrorbars
#install.packages("devtools")
library(devtools)
document()
detach("package:JGTools", unload = TRUE)
#install.packages("devtools")
library(devtools)
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
library(JGTools)
example("adderrorbars")
library(JGTools)
?adderrorbars
example("adderrorbars")
library(JGTools)
example("adderrorbars")
#install.packages("devtools")
library(devtools)
document()
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
library(JGTools)
example("adderrorbars")
library(data.table)
library(JGTools)
library(JGTools)
example("adderrorbars")
devWin()
blankplot(1,1)
adderrorbars(1,1,.4)
adderrorbars(1,1.2,.2, horiz = TRUE)
#install.packages("devtools")
library(devtools)
document()
detach("package:JGTools", unload = TRUE)
detach("package:JGTools", unload = TRUE)
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
library(devtools)
library(devtools)
install_github("jg44/JGTools", upgrade = TRUE, force=TRUE)
library(JGTools)
example("adderrorbars")
example("adderrorbars")
.bu
.bu <- function(x=getwd()){
require(rstudioapi)
tmp <- gsub("[[:space:]]", "%20", x)
if (substring(x, (nchar(tmp)-1), nchar(tmp)) == ".r") rstudioapi::navigateToFile(eval(tmp)) else browseURL(eval(tmp))
}
tmp <- "ssfasl.R"
tmp <- "sssf sfasl.R"
tmp <- gsub("[[:space:]]", "%20", x)
tmp
tmp <- gsub("[[:space:]]", "%20", x)
tmp
isRext <- tolower(substring(x, (nchar(tmp)-1), nchar(tmp))) == ".r"
isRext
tolower(substring(x, (nchar(tmp)-1), nchar(tmp)))
x <- "sssf sfasl.R"
tmp <- gsub("[[:space:]]", "%20", x)
tmp
isRext <- tolower(substring(x, (nchar(tmp)-1), nchar(tmp))) == ".r"
isRext
tolower(substring(x, (nchar(tmp)-1), nchar(tmp)))
tmp
tolower(substring(tmp, (nchar(tmp)-1), nchar(tmp))) == ".r"
if (isRext) rstudioapi::navigateToFile(eval(tmp)) else browseURL(eval(tmp))
